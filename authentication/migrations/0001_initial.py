# Generated by Django 5.1.1 on 2025-02-14 11:37

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(db_index=True, max_length=255, unique=True, validators=[django.core.validators.MinLengthValidator(4)])),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True, validators=[django.core.validators.EmailValidator(message='Entrez une adresse email valide.')])),
                ('first_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Le nom doit contenir uniquement des lettres, des tirets et des espaces.', regex='^[A-Za-z\\- ]+$')])),
                ('last_name', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.RegexValidator(message='Le nom doit contenir uniquement des lettres, des tirets et des espaces.', regex='^[A-Za-z\\- ]+$')])),
                ('country_code', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message='Entrez un code pays valide.', regex='^\\+\\d{1,3}(-\\d{1,4})?$')])),
                ('phone_number', models.CharField(blank=True, help_text='entrer le numero de telephone', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit comporter entre 9 et 15 chiffres.', regex='^\\d{9,15}$')])),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('nationality', models.CharField(blank=True, max_length=50, null=True)),
                ('town', models.CharField(blank=True, max_length=200, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('role', models.CharField(choices=[('student', 'Student'), ('parent', 'Parent'), ('admin', 'Admin')], max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('auth_provider', models.CharField(default='email', max_length=255)),
                ('gender', models.CharField(blank=True, max_length=255, null=True)),
                ('university', models.CharField(blank=True, max_length=255, null=True)),
                ('school_year', models.CharField(blank=True, max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Administrator',
                'verbose_name_plural': 'Administrators',
            },
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parent_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('accepted_university', models.CharField(blank=True, max_length=255, null=True)),
                ('accepted_program', models.CharField(blank=True, max_length=255, null=True)),
                ('accepted_level', models.CharField(blank=True, max_length=255, null=True)),
                ('destination_city', models.CharField(blank=True, max_length=255, null=True)),
                ('destination_country', models.CharField(blank=True, max_length=255, null=True)),
                ('reference_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('parent_reference_code', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('parents', models.ManyToManyField(related_name='children', to='authentication.parent')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
            },
        ),
    ]
